head(macs.res)
#knitr::include_graphics('images/hex-rmarkdown.png')
macs.res<-read.table("./PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T)
#knitr::include_graphics('images/hex-rmarkdown.png')
macs.res<-read.table("C:\Users\sovag\Documents\ChipSeqAnalysis\Materal for Chip-Seq Analysis/PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T)
#knitr::include_graphics('images/hex-rmarkdown.png')
macs.res<-read.table("\Users\sovag\Documents\ChipSeqAnalysis\Materal for Chip-Seq Analysis/PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T)
#knitr::include_graphics('images/hex-rmarkdown.png')
macs.res<-read.table("\sovag\Documents\ChipSeqAnalysis\Materal for Chip-Seq Analysis/PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T)
#knitr::include_graphics('images/hex-rmarkdown.png')
macs.res<-read.table("sovag\Documents\ChipSeqAnalysis\Materal for Chip-Seq Analysis/PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T)
sovag\
#knitr::include_graphics('images/hex-rmarkdown.png')
macs.res<-read.table("Documents\ChipSeqAnalysis\Materal for Chip-Seq Analysis/PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T)
#knitr::include_graphics('images/hex-rmarkdown.png')
macs.res<-read.table("Documents\ChipSeqAnalysis\Materal_for_Chip-Seq_Analysis/PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T)
#knitr::include_graphics('images/hex-rmarkdown.png')
macs.res<-read.table("./PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T)
txdb <- makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
txdb <- makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
library(GenomicFeatures)
library(ChIPpeakAnno)
$ Rscript NAME_model.r
macs.res<-read.table("./PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T)
head(macs.res)
library(GenomicFeatures)
library(ChIPpeakAnno)
library(ChIPpeakAnno)
BiocManager::install("GenomicFeatures")
install.packages(BiocManager)
install.packages("BiocManager"")
BiocManager::install("GenomicFeatures")
library(GenomicFeatures)
library(ChIPpeakAnno)
txdb <- makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
saveDb(txdb, file="./dm6.sqlite")
install.packages("BiocManager")
install.packages("ggplot2")
BiocManager::install("GenomicFeatures")
library(ChIPpeakAnno)
BiocManager::install("ChIPpeakAnno")
View(macs.res)
#this funciton is actually reading the GTF file and creating a data base.
txdb <- makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
#this funciton is actually reading the GTF file and creating a data base.
txdb <- makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
txdb <- makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
txdb <- makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
txdb = makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
library(GenomicFeatures)
library(ChIPpeakAnno)
makeTxDbFromGFF
txdb = makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
txdb = makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
head(macs.res)
?head
?head
macs.res
txdb = makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
#knitr::include_graphics('images/hex-rmarkdown.png')
macs.res<-read.table("./PeakAna_clk_Ip_vs_INP_peaks_bed.txt",header = T) ##This opens the text file wth the data table macs.res
?head(macs.res) ##This prints the fist 6 rows of each column in the data table macs.res
#INSTALL PACKAGES################################################################
install.packages("BiocManager") ##Install BiocManager package
install.packages("amap")
install.packages("ggplot2")
BiocManager::install("GenomicFeatures")  ##Install GenomicFeatures package via BiocManager
ge=genes(txdb, columns=c("tx_name", "gene_id", "tx_type")) ##Creates a dataset with the genomic ranges of the genes.
as.data.frame(head(ge)) ##Prints out the first couple rows from the dataset ge with the genes.
#GETTING GENOMIC RANGES OF THE PEAKS##############################################
peaksGR=GRanges(macs.res) ##Creates a GRanges object. Sets peaksGR as the data retreieved by using the function GRanges to gather the denomic ranges of the peaks from MACS.
annotatedPeak <- annotatePeakInBatch(peaksGR, AnnotationData=genes(txdb)) ##Creates dataset annotatedPeak to store the annotations created from the annotatePeak funtion using the data from the txdb dataset.
as.data.frame(head(annotatedPeak)) ##Prints the first couple rowsfrom the table of the dataset annotatedPeak. Lists where the peaks are for each of the genes.
library(AnnotationDbi) ##accesses the annotationDbi package
BiocManager::install("org.Dm.eg.db") ##Installs the org.Dm.eg.db package
library(GenomicFeatures) ##Open/Access GenomicFeatures library
library(GenomicFeatures) ##Open/Access GenomicFeatures library
library(GenomicFeatures) ##Open/Access GenomicFeatures library
library(ChIPpeakAnno)  ##Open/Access ChIPpeakAnno library
txdb=makeTxDbFromGFF(file="annot2.chr.gtf", format = "gtf", dataSource="dm6", organism="Drosophila melanogaster")
#This funciton is reads the .gtf file and creates a Text Database (TxDb) from the transcript annotations in the file.
saveDb(txdb, file="./dm6.sqlite") ##saves txdb as a sqlite, a library for the database and outputs a summary of the data from the database.
txdb=loadDb("./dm6.sqlite") ##Sets the value of txdb to the sqlite library so it is loaded directly without creating the database.
ge=genes(txdb, columns=c("tx_name", "gene_id", "tx_type")) ##Creates a dataset with the genomic ranges of the genes.
as.data.frame(head(ge)) ##Prints out the first couple rows from the dataset ge with the genes.
#GETTING GENOMIC RANGES OF THE PEAKS##############################################
peaksGR=GRanges(macs.res) ##Creates a GRanges object. Sets peaksGR as the data retreieved by using the function GRanges to gather the denomic ranges of the peaks from MACS.
annotatedPeak <- annotatePeakInBatch(peaksGR, AnnotationData=genes(txdb)) ##Creates dataset annotatedPeak to store the annotations created from the annotatePeak funtion using the data from the txdb dataset.
as.data.frame(head(annotatedPeak)) ##Prints the first couple rowsfrom the table of the dataset annotatedPeak. Lists where the peaks are for each of the genes.
library(AnnotationDbi) ##accesses the annotationDbi package
#BiocManager::install("org.Dm.eg.db") ##Installs the org.Dm.eg.db package
library(org.Dm.eg.db) ##accesses the org.Dm.eg.db package.
dm.select = select
library(dplyr) ##Accesses the dplyr package which is needed to manulate the data frames.
GeneNames = AnnotationDbi::select(org.Dm.eg.db, c(as.character(annotatedPeak$feature)), "SYMBOL", keytype = "ENSEMBL")
GeneNames$feature=GeneNames$ENSEMBL ##Creates object GeneName
head(GeneNames) ##Returns the beginning couple rows of the dataframe GeneNames
class(GeneNames)  ##Gives you the class of "GeneNames". It is a data frame.
GeneNames=GeneNames[,-1] ##Teturns the beginning couple rows of the dataframe "GeneNames" but excludes the first column "Ensembl" (Only Symbol and Feature are included)
head(GeneNames)
GeneNames = AnnotationDbi::select(org.Dm.eg.db, c(as.character(annotatedPeak$feature)), "SYMBOL", keytype = "ENSEMBL")
GeneNames = AnnotationDbi::select(org.Dm.eg.db, c(as.character(annotatedPeak$feature)), "SYMBOL", keytype = "ENSEMBL")
GeneNames$feature=GeneNames$ENSEMBL ##Creates object GeneName
head(GeneNames) ##Returns the beginning couple rows of the dataframe GeneNames
class(GeneNames)  ##Gives you the class of "GeneNames". It is a data frame.
GeneNames=GeneNames[,-1] ##Teturns the beginning couple rows of the dataframe "GeneNames" but excludes the first column "Ensembl" (Only Symbol and Feature are included)
head(GeneNames)
class(annotatedPeak) ##tells us the class of "annotatedPeak". It has the class "Genomic Ranges"
annotatedPeak_df=as.data.frame(annotatedPeak) ##annotatedPeak_df is changed to a data frame so it can be manipulated and rewritten as a table.
annotatedPeak_df=left_join(annotatedPeak_df,GeneNames, by="feature")  ##This merges everything in annotatedPeak_df with GeneNames if they have matching features. If features are the same, it rewrites the two tables as one table with values from annotatedPeak_df and GeneNames.
write.table(annotatedPeak_df,file = "ChipPeakAnno_results.xls",row.names = T,col.names = T,sep="\t") ## this actually writes the table we generated in the previous line of code.
GeneNames = AnnotationDbi::select(org.Dm.eg.db, c(as.character(annotatedPeak$feature)), "SYMBOL", keytype = "ENSEMBL")
GeneNames = AnnotationDbi::select(org.Dm.eg.db, c(as.character(annotatedPeak$feature)), "SYMBOL", keytype = "ENSEMBL")
GeneNames$feature=GeneNames$ENSEMBL ##Creates object GeneName
head(GeneNames) ##Returns the beginning couple rows of the dataframe GeneNames
class(GeneNames)  ##Gives you the class of "GeneNames". It is a data frame.
GeneNames=GeneNames[,-1] ##Teturns the beginning couple rows of the dataframe "GeneNames" but excludes the first column "Ensembl" (Only Symbol and Feature are included)
head(GeneNames)
class(annotatedPeak) ##tells us the class of "annotatedPeak". It has the class "Genomic Ranges"
annotatedPeak_df=as.data.frame(annotatedPeak) ##annotatedPeak_df is changed to a data frame so it can be manipulated and rewritten as a table.
annotatedPeak_df=left_join(annotatedPeak_df,GeneNames, by="feature")  ##This merges everything in annotatedPeak_df with GeneNames if they have matching features. If features are the same, it rewrites the two tables as one table with values from annotatedPeak_df and GeneNames.
write.table(annotatedPeak_df,file = "ChipPeakAnno_results.xls",row.names = T,col.names = T,sep="\t") ## this actually writes the table we generated in the previous line of code.
BiocManager::install("ChIPseeker") ##Installs the annotation package ChIPseeker
#BiocManager::install("ChIPseeker") ##Installs the annotation package ChIPseeker
library(ChIPseeker) ##accesses/loads the ChIPseeker package.
peakAnno <- annotatePeak(peaksGR, TxDb=txdb, verbose=FALSE)
##Creates the object "peakAnno" which consists of the annotated peaks of "peaksGR" and uses the annocations stored in txdb. verbose=false tells it not to print it.
peakAnno_df <- as.data.frame(peakAnno)  ##Sets peakAnno as a dataframe named "peakAnno_df"
GeneNames = dm.select(org.Dm.eg.db, c(as.character(peakAnno_df$geneId)), "SYMBOL", keytype = "ENSEMBL")
GeneNames$geneId=GeneNames$ENSEMBL
GeneNames = AnnotationDbi::select(org.Dm.eg.db, c(as.character(peakAnno_df$geneId)), "SYMBOL", keytype = "ENSEMBL")
GeneNames = AnnotationDbi::select(org.Dm.eg.db, c(as.character(peakAnno_df$geneId)), "SYMBOL", keytype = "ENSEMBL")
GeneNames$geneId=GeneNames$ENSEMBL
head(GeneNames)
GeneNames=GeneNames[,-1]
peakAnno_df=peakAnno_df %>% left_join(GeneNames, by="geneId") #this is merging the two tables by the column Geneld
head(peakAnno_df)
write.table(peakAnno_df,file = "ChIPseekerAnno_results.xls",row.names = T,col.names = T,sep="\t")
peakAnno_df_tim=peakAnno_df[which(peakAnno_df$SYMBOL=="tim"),] #What we are doing here?
peakAnno_df_tim=peakAnno_df_tim[order(peakAnno_df_tim$X.log10.pvalue.,decreasing = T),] # we order them by log10(pval), what that really means?
as.data.frame(head(peakAnno_df_tim))
?AnnotationDbi::select
?org.Dm.eg.db, c
?org.Dm.eg.db
GeneNames = ?AnnotationDbi::select(org.Dm.eg.db, c(as.character(annotatedPeak$feature)), "SYMBOL", keytype = "ENSEMBL") #retrieves data as data.frame based on parameters for
?AnnotationDbi::select
?org.Dm.eg.db
?AnnotationDbi::select
?as.character
?AnnotationDbi::select
View(peakAnno_df_tim)
